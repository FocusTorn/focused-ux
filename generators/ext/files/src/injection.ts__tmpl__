import { asClass, asValue, createContainer, InjectionMode } from 'awilix'
import type { AwilixContainer } from 'awilix'
import type { ExtensionContext } from 'vscode'
import { ConfigurationService } from '@fux/utilities'
import type { IFileSystem, IProcess } from '@fux/utilities'

// Example import from the core package
// import { ExampleService } from '@fux/<%= corePackage %>-core'

// TODO: Create and import your VSCode adapters
// import { FileSystemAdapter } from './services/adapters/FileSystem.adapter.js'
// import { ProcessAdapter } from './services/adapters/Process.adapter.js'
// import { WindowAdapter } from './services/adapters/Window.adapter.js'

export function createDIContainer(context: ExtensionContext): AwilixContainer {
  const container = createContainer({
    injectionMode: InjectionMode.PROXY,
  })

  // Register VSCode context
  container.register({
    extensionContext: asValue(context),
  })

  // Register Local Adapters
  // These bridge the gap between your core logic and the VSCode API.
  // container.register({
  //   fileSystem: asClass(FileSystemAdapter).singleton(),
  //   process: asClass(ProcessAdapter).singleton(),
  //   // ... other adapters
  // })

  // Manually construct services that have cross-dependencies
  // const configurationService = new ConfigurationService(
  //   container.resolve<IFileSystem>('fileSystem'),
  //   container.resolve<IProcess>('process'),
  // )
  // const windowAdapter = new WindowAdapter(configurationService)

  // Manually construct core services that require adapters
  // const exampleService = new ExampleService(
  //   container.resolve<IYourAdapterInterface>('yourAdapter')
  // );

  // Register manually created instances
  container.register({
    // configurationService: asValue(configurationService),
    // window: asValue(windowAdapter),
    // exampleService: asValue(exampleService),
  })

  return container
} 