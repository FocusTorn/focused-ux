import { describe, it, expect, beforeEach } from 'vitest'
import { setupTestEnvironment } from './helpers'

/**
 * Sample test file demonstrating the test scaffold usage
 * 
 * This file shows how to use the helper functions and mock setup.
 * Customize or remove this file based on your testing needs.
 */

describe('Sample Service Tests', () => {
	let mocks: ReturnType<typeof setupTestEnvironment>
	
	beforeEach(() => {
		mocks = setupTestEnvironment()
	})

	describe('Window Integration', () => {
		it('should show information message', () => {
			// Example of testing window.showInformationMessage
			const message = 'Test message'
			
			// Simulate calling the window service
			mocks.window.showInformationMessage(message)
			
			// Verify the mock was called correctly
			expect(mocks.window.showInformationMessage).toHaveBeenCalledWith(message)
			expect(mocks.window.showInformationMessage).toHaveBeenCalledTimes(1)
		})

		it('should handle active text editor', () => {
			// Verify that the mock editor is set up correctly
			expect(mocks.window.activeTextEditor).toBeDefined()
			expect(mocks.window.activeTextEditor?.document.uri.fsPath).toBe('/test/path')
		})
	})

	describe('Workspace Integration', () => {
		it('should read file content', async () => {
			const filePath = '/test/file.txt'
			const fileContent = 'Hello, World!'
			
			// Mock the file system response
			mocks.workspace.fs.readFile.mockResolvedValue(fileContent)
			
			// Simulate file reading
			const result = await mocks.workspace.fs.readFile(filePath)
			
			// Verify the result and mock calls
			expect(result).toBe(fileContent)
			expect(mocks.workspace.fs.readFile).toHaveBeenCalledWith(filePath)
		})

		it('should create directory', async () => {
			const dirPath = '/test/new-directory'
			
			// Mock the directory creation
			mocks.workspace.fs.createDirectory.mockResolvedValue(undefined)
			
			// Simulate directory creation
			await mocks.workspace.fs.createDirectory(dirPath)
			
			// Verify the mock was called
			expect(mocks.workspace.fs.createDirectory).toHaveBeenCalledWith(dirPath)
		})
	})

	describe('Path Utilities', () => {
		it('should join paths correctly', () => {
			const path1 = '/base'
			const path2 = 'subdirectory'
			const expectedPath = '/base/subdirectory'
			
			// Mock the path.join response
			mocks.path.join.mockReturnValue(expectedPath)
			
			// Simulate path joining
			const result = mocks.path.join(path1, path2)
			
			// Verify the result and mock calls
			expect(result).toBe(expectedPath)
			expect(mocks.path.join).toHaveBeenCalledWith(path1, path2)
		})

		it('should get file extension', () => {
			const filePath = '/test/file.txt'
			const expectedExt = '.txt'
			
			// Mock the path.extname response
			mocks.path.extname.mockReturnValue(expectedExt)
			
			// Simulate getting file extension
			const result = mocks.path.extname(filePath)
			
			// Verify the result and mock calls
			expect(result).toBe(expectedExt)
			expect(mocks.path.extname).toHaveBeenCalledWith(filePath)
		})
	})

	describe('Mock Object Creation', () => {
		it('should create mock URI', () => {
			const fsPath = '/custom/test/path'
			const uri = createMockUri(fsPath)
			
			expect(uri.fsPath).toBe(fsPath)
		})

		it('should create mock text document', () => {
			const uri = createMockUri('/test/document.ts')
			const document = createMockTextDocument(uri)
			
			expect(document.uri).toBe(uri)
			expect(document.fileName).toBe('/test/document.ts')
			expect(document.languageId).toBe('typescript')
		})

		it('should create mock text editor', () => {
			const document = createMockTextDocument()
			const editor = createMockTextEditor(document)
			
			expect(editor.document).toBe(document)
			expect(editor.selection).toBeDefined()
			expect(editor.viewColumn).toBe(1)
		})
	})
})

// Import the helper functions used in tests
import { createMockUri, createMockTextDocument, createMockTextEditor } from './helpers' 