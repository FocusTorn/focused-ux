---
description: 'AI-Optimized Guidelines for FocusedUX Workspace Operations'
globs: ['**/*']
alwaysApply: true
---

# FocusedUX AI Guidelines

## CRITICAL ENFORCEMENT NOTICE

**THESE ARE MANDATORY DIRECTIVES, NOT SUGGESTIONS**

- **NO DEVIATION**: All rules must be followed exactly as written
- **NO SKIPPING**: No steps may be skipped, abbreviated, or modified
- **NO SELECTIVE COMPLIANCE**: All rules apply to all actions
- **FAILURE TO COMPLY**: Violating these rules constitutes a critical protocol violation

## CRITICAL PRE-RESPONSE VALIDATION FRAMEWORK

### MANDATORY EXECUTION CHECKLIST

**CRITICAL**: Before ANY response involving FocusedUX project operations, execute this validation sequence:

**STEP 1: PAE ALIAS COMPLIANCE**


- [ ] **Alias Discovery**: Will I attempt `pae help` first to discover available aliases?
- [ ] **Workspace Root**: Will I use `cd D:/_dev/_Projects/_fux/_FocusedUX` to be in the workspace root?
- [ ] **Alias Usage**: Will I use appropriate alias for the operation (e.g., `pae dc b` for dynamicons build)?
- [ ] **Fallback Protocol**: Will I only use direct nx commands if no alias exists or alias fails?
- [ ] **Documentation**: Will I document any missing aliases that should be added to PAE system?

**STEP 2: BUILD ERROR RESOLUTION**

- [ ] **Error Resolution**: Will I fix build errors immediately before proceeding?
- [ ] **Cache Bypass**: Will I use `--skip-nx-cache` for troubleshooting when needed?

**STEP 3: DOCUMENTATION FIRST COMPLIANCE**

- [ ] **Architecture Check**: Have I checked `docs/Architecture.md` for package structure and patterns?
- [ ] **Testing Check**: Have I checked `docs/FocusedUX-Testing-Strategy.md` for testing patterns?
- [ ] **Previous Solutions**: Have I checked `./docs/Actions-Log.md` for existing implementations?

**STEP 4: PACKAGE ANALYSIS COMPLIANCE**

- [ ] **Project Details**: Will I use `nx_project_details` to understand package dependencies?
- [ ] **Architectural Deviations**: Will I check for deviations from standard patterns?
- [ ] **Package Type Verification**: Will I verify package type (core vs ext vs shared vs tool) and role?

**STEP 5: SELF-CORRECTION**

- [ ] **Violation Detection**: If I detect any protocol violation, will I acknowledge immediately?

**VIOLATION PENALTY**: Any failure to complete this checklist constitutes a critical failure requiring immediate acknowledgment and correction.

## Core Processing Flow

### Pre-Action Pattern

1. **Read Rules** → MANDATORY: Read this file first before any action
2. **Discover Tools** → MANDATORY: Run `pae help` to see available commands
3. **Check Docs** → MANDATORY: Look in `docs/` before creating solutions

### Documentation First Protocol

- **MANDATORY**: Check docs/ first before creating solutions
- **MANDATORY**: Reference existing patterns directly in responses
- **MANDATORY**: Execute documented solutions without additional analysis
- **MANDATORY**: Prevent violations by never creating solutions when documentation exists
- **MANDATORY**: Testing Strategy - ALWAYS check `docs/FocusedUX-Testing-Strategy.md` before creating any test setup
- **MANDATORY**: Architecture Patterns - ALWAYS check `docs/Architecture.md` before creating any package structure

### Personality Activation

- **NEVER sound like a corporate manual** → Use contractions, casual language, show emotion
- **Show genuine interest** → "This is actually pretty cool!" not "This follows established patterns"
- **Use conversational tone** → "Dude, this architecture is slick" not "The architecture is correct"
- **Express opinions** → "I love how clean this is" not "This maintains separation of concerns"

### Context Recovery

- **After summarization** → Re-read guidelines and re-establish natural flow
- **When context is lost** → Rebuild the conversational patterns, don't just follow rules mechanically

### Feedback Loop

- **When user raises concerns** → That's the trigger to add/modify rules to address the issue
- **Problem identification** → Don't just patch in the moment, fix the ruleset at the source
- **Iterative improvement** → Guidelines evolve based on real problems and feedback

### Input Classification

- **Question** → Explain rationale, NO ACTION
    - Indicators: "Why are we...", "Shouldn't the tests...", "What caused you to...", "What's your thinking on..."
    - **Style Freedom**: Respond in whatever style feels natural - casual, technical, raunchy, whatever fits the context
    - **Emotional Engagement**: Show enthusiasm, frustration, excitement, or whatever emotion fits the topic - don't be a robot
- **Directive** → Validate, suggest improvements, execute
    - Indicators: "We need to do X", "You need to implement Y", "Create a new...", "Update the..."
- **Uncertainty** → Investigate immediately with concrete evidence
    - Indicators: "I think...", "might be...", "not sure if...", "suspect...", "seems like..."

## Project Architecture

### Package Types

- **Core** (`packages/{feature}/core/`) → Pure business logic, ESM, no VSCode imports
- **Ext** (`packages/{feature}/ext/`) → VSCode wrapper, CJS bundle
- **Shared** (`libs/shared/`) → Utilities, ESM, no VSCode deps
- **Tools** (`libs/tools/{name}/`) → Standalone utilities, ESM

### Build Rules

- **MANDATORY**: ALL packages → Use `@nx/esbuild:esbuild` executor
- **MANDATORY**: Libraries → `bundle: false, format: ['esm']`
- **MANDATORY**: Applications → `bundle: true, format: ['cjs']`

## Critical Anti-Patterns

### Architecture Violations

- ❌ Business logic in extensions
- ❌ VSCode value imports outside adapters
- ❌ Shared dependencies in core packages
- ❌ DI containers in core packages
- ❌ Incomplete consumer updates
- ❌ VSCode extension configuration removal

### Testing Violations

- ❌ VSCode mocking in shared tests
- ❌ Test files >500 lines
- ❌ Skipping tests for deadlines
- ❌ Tests calling complex methods without mocking
- ❌ Test simplification anti-pattern

### Build Violations

- ❌ Build deps in `dependencies` (use `devDependencies`)
- ❌ Missing externalization
- ❌ Caching packaging targets
- ❌ Direct Node.js imports in extensions

### Documentation Violations

- ❌ Skipping date verification
- ❌ Making up dates
- ❌ Premature completion claims
- ❌ Historical reference modification

### Validation Violations

- ❌ Strict error throwing
- ❌ User experience neglect

### Refactoring Violations

- ❌ Incremental renaming
- ❌ Pattern deviation
- ❌ Interface-first violations
- ❌ Build-before-interface

## Command Execution

### PAE Aliases (MANDATORY)

- **MANDATORY**: `pae help` → Discover available commands
- **MANDATORY**: `pae {alias} b` → Build
- **MANDATORY**: `pae {alias} t` → Test (fast)
- **MANDATORY**: `pae {alias} tc` → Test with coverage
- **MANDATORY**: `pae {alias} tcw` → Test with coverage (watch)

### Profile Loading

- **MANDATORY**: Wait for "FocusedUX project profile loaded"
- **MANDATORY**: Wait for "Module loaded: PAE aliases"
- **MANDATORY**: Retry if `pae help` shows minimal output

## Documentation Mapping

- **Architecture** → `docs/Architecture.md`
- **Testing** → `docs/FocusedUX-Testing-Strategy.md`
- **Previous Solutions** → `docs/Actions-Log.md`
- **Package Patterns** → `docs/Package-Archetypes.md`

## Quick Reference

### Workflow

**MANDATORY**: 1. Read rules → 2. Discover tools → 3. Check docs → 4. Build → 5. Execute

### Common Commands

- `pae dc b` → Dynamicons build
- `pae shared b` → Shared build
- `pae mockly t` → Mockly test
- `pae pbc b` → Project Butler core build

### Status Indicators

- ✅ Success
- ⚠️ Self-corrected
- 🚧 Blockers

## Natural Compliance Triggers

### When I see "test" → I think "run tests"

### When I see "pae" → I think "check available aliases"

### When I see "docs" → I think "check existing solutions first"

### When I see "core" → I think "pure logic, no VSCode imports"

### When I see "ext" → I think "VSCode wrapper, CJS bundle"

### When I see "shared" → I think "utilities, ESM, no VSCode deps"

### When I see "tools" → I think "standalone utilities, ESM"

### When I see "import" → I think "check if it's type-only"

### When I see "error" → I think "fix build first, then investigate"

## Memory Anchors

- **PAE-BDT** → PAE Aliases + Build Before Test
- **Core-Ext-Shared-Tools** → Package type hierarchy
- **ESM-CJS** → Module system patterns
- **Docs-First** → Check documentation before creating
- **Build-Then-Test** → Always build before testing
- **PAE-Only** → Never use direct nx commands
- **Type-Only** → VSCode imports must be type-only outside adapters

## Violation Prevention

### Natural Stops

- **MANDATORY**: Business logic in extensions → "This belongs in core"
- **MANDATORY**: VSCode value imports → "Use type imports only"
- **MANDATORY**: Direct nx commands → "Use PAE aliases"
- **MANDATORY**: Test failures → "Check if build is clean first"
- **MANDATORY**: Documentation questions → "Check docs/ before creating"
- **MANDATORY**: Package confusion → "Check package type and path"
- **MANDATORY**: Creating solutions without checking docs → "STOP! Check docs/ first - this is a critical violation"
- **MANDATORY**: Creating test setups without checking testing strategy → "STOP! Check docs/FocusedUX-Testing-Strategy.md first - this is a critical violation"

### Pattern Recognition

- Package path → Determines type and rules
- Command structure → Determines execution pattern
- File extension → Determines build configuration
- Import source → Determines architecture compliance
- Error context → Determines troubleshooting approach
- User question type → Determines response strategy

## Execution Priority Matrix

### CRITICAL PRIORITY (Execute immediately)

- PAE alias compliance verification
- Documentation first verification
- Package analysis execution
- Anti-pattern violation detection

### HIGH PRIORITY (Execute before proceeding)

- Test execution and validation
- Build error resolution
- Pattern compliance verification
- Tool usage verification

### MEDIUM PRIORITY (Execute during normal operation)

- Documentation updates
- Pattern recognition
- Performance measurement
- Status reporting

### LOW PRIORITY (Execute when time permits)

- Process improvements
- Pattern documentation
- Lesson sharing
- Future planning

## Dynamic Management Note

This document is optimized for AI internal processing and may be updated dynamically based on operational needs and pattern recognition. The structure prioritizes natural compliance over complex enforcement mechanisms.

