---
globs: ['**/*.md']
alwaysApply: true
---

# Markdown Formatting Rules

## 1. :: Title Formatting

### 1.1. :: Titles: Plain text, NEVER bold formatting <!-- Start Fold -->

**✅ CORRECT - Use plain text for titles**:

```markdown
# Title Text

## Title Text

### Title Text
```

**❌ INCORRECT - Never use bold formatting for titles**:

```markdown
# **Title Text**

## **Title Text**

### **Title Text**
```

**ℹ️ Rationale**: <!-- Start Fold -->

- Markdown titles (`#`, `##`, `###`) already provide semantic emphasis
- Adding bold formatting (`**`) creates visual redundancy
- Plain text titles are cleaner and more readable
- Follows standard markdown conventions and best practices
- Improves accessibility and semantic structure

<!-- Close Fold: Rationale -->

<!-- Close Fold: Plain text -->

### 1.2. :: Section Numbering <!-- Start Fold -->

**✅ CORRECT - Use numbered sections for titles**:

```markdown
## 1. :: [Title text]

### 1.1. :: [Title text]

### 1.2. :: [Title text]

## 2. :: [Next Title text]

### 2.1. :: [Next Title text]

### 2.2. :: [Next Title text]
```

### ❌ INCORRECT - Don't use unnumbered sections:

```markdown
## Title text

### Title text

### Another Title text

## Next Title text
```

<!-- Close Fold: Section Numbering -->

### 1.3. :: Additional Guidelines <!-- Start Fold -->

- Use bold (`**text**`) for emphasis within paragraph text, not for titles
- Reserve bold formatting for highlighting important content in body text
- Keep title hierarchy clear and consistent
- Use descriptive, concise titles that clearly indicate content purpose
- **All ## titles must be numbered sequentially (1., 2., 3., etc.)**
- **All ### titles must be numbered with parent section number (1.1., 1.2., 2.1., etc.)**
- Use `::` separator between number and title text
- Maintain consistent numbering throughout the document

<!-- Close Fold: Additional Guidelines -->

---

# Executive Summary - Fluency of {PACKAGE-NAME-IN-TITLE-CASE}

## POTENTIAL PROBLEM AREAS

1. Build Performance
    - Large bundle sizes due to unused dependencies (estimated 15% reduction possible)
    - Sequential test execution causing 40% longer test times
    - Missing build caching for core package dependencies

2. Code Quality Issues
    - 3 files exceed 300 lines (maintainability threshold)
    - Missing error handling in 2 critical service methods
    - Inconsistent naming patterns between core and ext packages

3. Architecture Concerns
    - Tight coupling between service layer and VSCode API
    - Missing abstraction layer for external file operations
    - Circular dependency risk in package dependency graph

4. Security & Dependencies
    - 2 dependencies with known vulnerabilities (low severity)
    - Missing input validation in user configuration handling
    - Overly broad file system access permissions

---

## OPTIMIZATION OPPORTUNITIES

1. Performance Optimizations

- HIGH IMPACT: Implement build parallelization → 60% faster builds
- MEDIUM IMPACT: Add bundle analysis and tree-shaking → 20% smaller bundles
- LOW IMPACT: Optimize test execution order → 30% faster test runs

2. Code Structure Improvements
    - HIGH IMPACT: Extract service interfaces → Better testability and maintainability
    - MEDIUM IMPACT: Implement consistent error handling patterns → Reduced debugging time
    - LOW IMPACT: Standardize naming conventions → Improved developer experience

3. Architecture Enhancements
    - HIGH IMPACT: Add dependency injection container → Reduced coupling
    - MEDIUM IMPACT: Create abstraction layer for file operations → Better testability
    - LOW IMPACT: Implement configuration validation → Fewer runtime errors

4. Development Experience
    - MEDIUM IMPACT: Add comprehensive JSDoc coverage → Faster onboarding
    - LOW IMPACT: Implement automated dependency updates → Reduced maintenance burden

---

## SUGGESTIONS FOR FUTURE FEATURES

1. Core Functionality Extensions
    - Multi-workspace support for enterprise users
    - Plugin system for custom command extensions
    - Advanced caching strategies for large projects

2. Developer Experience Features
    - Interactive configuration wizard for new users
    - Performance profiling dashboard
    - Automated code quality reporting

3. Integration Enhancements
    - VSCode marketplace publishing automation
    - CI/CD pipeline integration templates
    - Cross-platform compatibility improvements

4. Advanced Capabilities
    - Machine learning-based optimization suggestions
    - Real-time collaboration features
    - Advanced analytics and usage tracking

Dont need to see the

═══════════════════════════════════════════════════════════════════════════════

IMPLEMENTATION PRIORITY: Focus on HIGH IMPACT optimizations first,
followed by security fixes, then medium/low impact improvements.

