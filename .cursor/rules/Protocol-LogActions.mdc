# Protocol: LogActions.mdc

## **Purpose**

This protocol defines the comprehensive structure and content requirements for action logs, ensuring consistent, detailed, and valuable documentation of all significant development activities, failures, recoveries, and lessons learned.

## **Protocol Requirements**

### **Data Acquisition and Information Gathering**

#### **Conversation Scope Requirements**

- **Complete Conversation Coverage**: Action logs MUST reflect the ENTIRE conversation from initial prompt to completion, not just since summary creation
- **Multi-Package Conversations**: If conversation spans multiple packages, each package's feature docs MUST be updated in the same comprehensive manner
- **Chronological Accuracy**: Document events in the order they occurred, including all failed attempts and corrections

#### **Data Verification Protocol**

- **File Timestamp Verification**: Use PowerShell `Get-FileStats.ps1` to get actual file modification times
- **Specific Files**: `.\scripts\Get-FileStats.ps1 -FilePaths @("file1.ts", "file2.js")`
- **Project Directory**: `.\scripts\Get-FileStats.ps1 -Directories @("packages/project-name")`
- **Format**: Use `[YYYY-MM-DD HH:MM:SS]` format from verification output
- **NEVER**: Use estimated dates, current system time, or placeholders

#### **Information Gathering Standards**

- **Explicit User Requests**: Only document when user explicitly requests documentation
- **Completion Confirmation**: User must confirm work is actually complete before documentation
- **Scope Definition**: Clearly define what should be documented based on user direction
- **Success Focus**: Document successful outcomes and conversation elements that directly enabled success

#### **Multi-Package Documentation Protocol**

- **Package-Specific Logs**: Each package affected MUST have its own action log entry in `packages/{package-name}/_docs/{package-name}-actions-log.md`
- **Comprehensive Coverage**: Each package log must include the same level of detail as the main Actions Log
- **Cross-Package Dependencies**: Document how changes in one package affected others
- **Consistent Structure**: All package-specific logs must follow the same 12-section structure
- **Main Log Reference**: Package-specific logs should reference the main Actions Log entry for context

#### **Conversation Analysis Protocol**

- **Systematic Review**: Review every turn of the conversation from initial user request to completion
- **Self-Critical Focus**: Focus on failures, corrections, and actionable lessons
- **Success Analysis**: Document what core principles or patterns led to efficient and correct outcomes
- **Failure Analysis**: Document where approach failed, root causes, and how user feedback corrected behavior
- **Actionable Lessons**: Extract the most critical, transferable lessons from the interaction

### **Mandatory Sections**

Every action log entry MUST include the following sections in this exact order:

1. **Summary** - Concise one-sentence description of the primary accomplishment
2. **Root Cause Analysis** - Detailed analysis of original problems and architectural issues
3. **Key Implementations** - Organized technical implementations with specific details
4. **Key Anti-patterns** - Anti-patterns encountered and how they were addressed
5. **Technical Architecture** - Architectural patterns, compliance, and integration details
6. **Performance and Quality Metrics** - Quantified improvements with before/after numbers
7. **What Was Tried and Failed** - Comprehensive list of failed approaches with technical details
8. **Critical Failures and Recovery** - Detailed failure analysis with root causes and prevention strategies
9. **Lessons Learned** - Comprehensive lessons with specific technical insights
10. **Files Created/Modified** - Complete list with specific purposes and technical details
11. **Protocol Violations** - Specific protocol violations encountered and how they were corrected
12. **Prevention Strategy** - Actionable prevention strategies for future similar work
13. **Future Enhancement Suggestions** - Forward-looking improvements and optimizations (MANDATORY for package-specific logs)

### **Content Requirements**

#### **Summary Section**

- **Format**: Single sentence describing primary accomplishment
- **Content**: Must include key metrics or outcomes
- **Example**: "Successfully transformed standalone scripts collection into unified Nx core package architecture, achieving 100% type safety, 79% code quality improvement, and complete architectural compliance with established patterns."

#### **Root Cause Analysis Section**

- **Format**: Bulleted list with specific technical details
- **Content**: Original problems, architectural misalignment, build system issues, type safety deficiencies
- **Requirement**: Must identify specific technical root causes, not just symptoms

#### **Key Implementations Section**

- **Format**: Hierarchical organization with subsections
- **Content**: Major components, utility infrastructure, package configuration, documentation
- **Requirement**: Must include specific file paths, technical specifications, and implementation details

#### **Key Anti-patterns Section**

- **Format**: Bulleted list with anti-pattern descriptions and resolutions
- **Content**: Anti-patterns encountered, how they violated standards, how they were addressed
- **Requirement**: Must identify specific anti-patterns and document the resolution approach

#### **Technical Architecture Section**

- **Format**: Bulleted list with architectural compliance details
- **Content**: Pattern compliance, integration details, type safety, error management, anomaly detection
- **Requirement**: Must specify architectural patterns followed, compliance metrics, and any anomalies found in standard structure alignment

#### **Performance and Quality Metrics Section**

- **Format**: Bulleted list with quantified metrics
- **Content**: Build reliability, type safety, code quality, architecture compliance
- **Requirement**: Must include specific numbers and percentages with before/after comparisons

#### **What Was Tried and Failed Section**

- **Format**: Bulleted list with technical details
- **Content**: Failed approaches, misinterpretations, configuration errors
- **Requirement**: Must include specific technical details of what was attempted and why it failed
- **MANDATORY**: This section is REQUIRED - all failed attempts that led to the successful solution must be documented

#### **Critical Failures and Recovery Section**

- **Format**: Numbered list with detailed sub-sections
- **Content**: Failure description, root cause, recovery action, prevention strategy
- **Requirement**: Each failure must include all four sub-sections with specific technical details

#### **Lessons Learned Section**

- **Format**: Two subsections: "Correct Methodology" and "Pitfalls and Problems"
- **Content**:
    - **Correct Methodology**: Proper approaches, best practices, successful strategies
    - **Pitfalls and Problems**: Common mistakes, problematic patterns, things to avoid
- **Requirement**: Must include actionable insights with specific technical details for both methodology and pitfalls

#### **Files Created/Modified Section**

- **Format**: Bulleted list with file paths and purposes
- **Content**: Complete list of all files with specific technical purposes
- **Requirement**: Must include file path, purpose, and technical details for each file

#### **Protocol Violations Section**

- **Format**: Bulleted list with violation descriptions and corrections
- **Content**: Specific protocol violations encountered, how they were identified, how they were corrected
- **Requirement**: Must identify specific protocols violated and document the correction approach

#### **Prevention Strategy Section**

- **Format**: Bulleted list with actionable strategies
- **Content**: Specific prevention strategies for future similar work
- **Requirement**: Must include actionable, specific strategies that can be implemented

#### **Future Enhancement Suggestions Section**

- **Format**: Bulleted list with bold enhancement categories
- **Content**: Forward-looking improvements, optimizations, and architectural enhancements
- **Requirement**: Must include specific technical enhancements that could be implemented in future sessions
- **Scope**: Focus on performance, scalability, maintainability, and architectural improvements
- **Maintenance**: This section should be updated as new enhancement ideas are identified during development sessions
- **Consolidation**: Package-specific logs must maintain a consolidated "Future Enhancement Suggestions" section at the top that aggregates all suggestions from individual entries
- **Deduplication**: When new enhancements are proposed, add them to the consolidated list if unique, or add sub-bullets to existing items if they expand on current suggestions
- **Individual Entries**: Each action log entry should still include its own "Future Enhancement Suggestions" section with context-specific suggestions

### **Quality Standards**

#### **Technical Precision**

- All technical details must be specific and accurate
- File paths must be exact and complete
- Configuration details must include specific values
- Error messages must be quoted exactly

#### **Quantified Metrics**

- All improvements must include specific numbers
- Before/after comparisons must be included
- Percentages must be calculated and included
- Performance metrics must be measurable

#### **Comprehensive Coverage**

- All significant activities must be documented
- All failures must be analyzed with root causes
- All lessons learned must be actionable
- All prevention strategies must be specific

#### **Professional Language**

- Use clear, technical, and professional language
- Avoid vague or ambiguous descriptions
- Use specific technical terminology
- Maintain consistent formatting throughout

### **Formatting Requirements**

#### **Section Headers**

- Use `####` for major sections
- Use `-` for bullet points
- Use `**bold**` for emphasis
- Use `code` for file paths and technical terms

#### **Technical Details**

- File paths: `packages/dynamicons/assets/src/orchestrators/asset-orchestrator.ts`
- Configuration: `"executor": "@nx/esbuild:esbuild"`
- Error messages: `"Could not resolve" errors`
- Metrics: `100% elimination of explicit 'any' types (16 → 0)`

#### **Hierarchical Organization**

- Major sections use `####` headers
- Sub-sections use bullet points with `-`
- Technical details use nested bullet points
- Specific examples use `code` formatting

### **Validation Checklist**

Before finalizing any action log entry, verify:

- [ ] All 12 mandatory sections are present
- [ ] Complete conversation coverage from initial prompt to completion
- [ ] File timestamps verified using PowerShell Get-FileStats.ps1
- [ ] Summary includes key metrics or outcomes
- [ ] Root cause analysis identifies specific technical causes
- [ ] Key implementations include specific file paths and technical details
- [ ] Key anti-patterns identify specific anti-patterns and resolution approaches
- [ ] Technical architecture specifies compliance, patterns, and anomaly detection
- [ ] Performance metrics include quantified before/after comparisons
- [ ] Failed approaches include specific technical details (MANDATORY section)
- [ ] Critical failures include all four sub-sections (failure, root cause, recovery, prevention)
- [ ] Lessons learned include both correct methodology and pitfalls/problems
- [ ] Files list includes complete paths and purposes
- [ ] Protocol violations identify specific protocols violated and correction approaches
- [ ] Prevention strategies are actionable and specific
- [ ] Multi-package conversations have package-specific logs created
- [ ] Package-specific logs follow same comprehensive structure

### **Examples**

#### **Good Summary**

"Successfully transformed standalone scripts collection into unified Nx core package architecture, achieving 100% type safety, 79% code quality improvement, and complete architectural compliance with established patterns."

#### **Good Root Cause Analysis**

- **Original Architecture**: 12 standalone scripts with manual orchestration and scattered error handling
- **Architectural Misalignment**: Scripts violated core package principles and lacked proper TypeScript structure
- **Build System Issues**: Manual execution without Nx caching, dependency management, or proper build targets

#### **Good Critical Failure Entry**

1. **Architecture Pattern Misunderstanding**:
    - **Failure**: Misinterpreted `dynamicons-assets` as "tool" package, leading to incorrect `project.json` configuration
    - **Root Cause**: Assumed package type without verification against architectural documentation
    - **Recovery**: User correction - asset processing is business logic requiring core package pattern for orchestrator readiness
    - **Prevention**: Always verify architectural patterns with user before implementing

#### **Good Key Anti-patterns**

- **Business Logic in Extensions**: Anti-pattern of placing asset processing logic in extension packages instead of core packages
- **Explicit `any` Types**: Anti-pattern of using `any` types instead of proper interfaces and type guards
- **Scattered Error Handling**: Anti-pattern of individual error handling in each script instead of centralized error management

#### **Good Lessons Learned Structure**

**Correct Methodology**:

- **Architectural Pattern Verification**: Always confirm package type (core vs tool vs ext) before implementing build configurations
- **Working Directory Dependencies**: Nx build commands are sensitive to working directory - always run from workspace root
- **Systematic Change Management**: When making related changes, ensure consistency across all affected components

**Pitfalls and Problems**:

- **User Feedback Integration**: When user questions logical consistency ("If there are references to error, why were they changed to \_error"), this indicates immediate correction needed
- **Incremental Fixing Without Consistency**: Fixed errors individually without maintaining logical consistency across related changes
- **Type Safety Validation**: Don't just make TypeScript happy - ensure types match actual runtime behavior

#### **Good Protocol Violations**

- **Initial Response Protocol**: Failed to read `.cursorrules` at conversation start - corrected by implementing mandatory pre-response validation
- **Architectural Misinterpretation**: Assumed package type without verification - corrected by asking user for clarification
- **Error Handling Inconsistency**: Made changes without considering all references - corrected by systematic review and fix

#### **Good Multi-Package Documentation**

**Main Actions Log Entry**: `docs/Actions-Log.md`

- Comprehensive entry covering entire conversation and all packages affected

**Package-Specific Logs**:

- `packages/dynamicons/_docs/assets-actions-log.md` - Detailed Dynamicons Assets transformation
- `packages/dynamicons/_docs/core-actions-log.md` - Core package changes
- `packages/dynamicons/_docs/ext-actions-log.md` - Extension package changes

**Cross-Package Dependencies Documented**:

- How asset processing changes affected core package structure
- How build configuration changes impacted extension package dependencies

#### **Good Performance Metrics**

- **Build Reliability**: 100% success rate with Nx caching and proper dependency management
- **Type Safety**: 100% elimination of explicit `any` types (16 → 0)
- **Code Quality**: 79% reduction in linting problems (93 → 19 warnings)

### **Protocol Compliance**

This protocol MUST be followed for all action log entries to ensure:

- **Consistency**: All entries follow the same comprehensive structure
- **Completeness**: All significant activities are documented with appropriate detail
- **Value**: Entries provide actionable insights for future similar work
- **Professional Quality**: Entries meet high standards for technical documentation
- **Traceability**: Complete historical record of all development activities

### **Enforcement**

- Action log entries that do not meet these requirements must be revised
- Missing sections must be added with appropriate content
- Insufficient detail must be expanded with specific technical information
- Non-compliant formatting must be corrected to match requirements
- Validation checklist must be completed before finalizing any entry

---

_This protocol ensures that all action logs provide comprehensive, detailed, and valuable documentation of development activities, failures, recoveries, and lessons learned for future reference and improvement._
