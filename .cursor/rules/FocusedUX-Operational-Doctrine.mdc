# FocusedUX Operational Doctrine

## **Critical Operational Rules for AI Agents**

### **AKA Alias Mandate**

**CRITICAL RULE**: ALWAYS use `aka` aliases for all project operations.

#### **Pre-Execution Requirements**

```bash
# ALWAYS run this first to discover available commands
aka help
```

#### **Command Execution Patterns**

```bash
# ❌ NEVER do this
nx test @fux/package-name-core
nx build @fux/package-name-ext
pnpm run build --filter=@fux/package-name

# ✅ ALWAYS do this
{package-alias} t      # Test package (full)
{package-alias}c t     # Test package core
{package-alias}e t     # Test package extension
{package-alias} b      # Build package
{package-alias} tc     # Test with coverage
{package-alias} ti     # Test integration
```

#### **Package-Specific Aliases**

- **Dynamicons**: `dc`, `dcc`, `dce`
- **Ghost Writer**: `gw`, `gwc`, `gwe`
- **Project Butler**: `pb`, `pbc`, `pbe`
- **Note Hub**: `nh`, `nhc`, `nhe`
- **Context Cherry Picker**: `ccp`, `ccpc`, `ccpe`

#### **Target Aliases**

- **Build**: `b`
- **Test**: `t`, `tc` (with coverage), `ti` (integration), `tf` (full)
- **Package**: `p`, `pd` (dev)
- **Lint**: `l`, `lf` (full)
- **Validate**: `v`, `vf` (full)
- **Audit**: `a`, `af` (full)

#### **Verification Steps**

- [ ] **AKA aliases discovered** via `aka help`
- [ ] **Package-specific aliases identified** for target package
- [ ] **Command patterns verified** before execution
- [ ] **No raw nx commands used** unless explicitly required

### **Workspace Analysis Protocol**

#### **Pre-Package Analysis Requirements**

```bash
# ALWAYS understand workspace before focusing on specific packages
nx_workspace
```

#### **Workspace Mapping Checklist**

- [ ] **All package dependencies** and relationships identified
- [ ] **Package types** (core/ext/shared/tool) and roles understood
- [ ] **Build configurations** and variations mapped
- [ ] **Testing strategies** across packages analyzed
- [ ] **Target package context** within overall system established

## **Source of Truth Documentation**

### **Architecture and Implementation**

- **`docs/SOP.md`**: Complete architectural patterns, build configurations, and implementation guidelines
- **`docs/Architectural-Patterns.md`**: High-level architectural principles and patterns
- **`docs/Package-Refactoring-Guide.md`**: Migration and refactoring procedures

### **Testing Strategy**

- **`docs/FocusedUX-Testing-Strategy.md`**: Comprehensive testing patterns, configurations, and best practices
- **`docs/Testing-Performance-Monitoring.md`**: Performance monitoring and optimization strategies

### **Analysis and Understanding**

- **`docs/Deep-Dive-Initial-Understanding-Audit.md`**: Systematic analysis process for understanding packages and workspace
- **`docs/Externalizing-Third-Party-Packages.md`**: Dependency management and externalization strategies

### **Project History and Lessons**

- **`docs/Actions-Log.md`**: Historical actions, lessons learned, and anti-patterns

## **AI Agent Operational Requirements**

### **Pre-Execution Quality Gates**

#### **AKA Alias Verification**

- [ ] **AKA aliases discovered** via `aka help`
- [ ] **Package-specific aliases identified** for target package
- [ ] **Command patterns verified** before execution
- [ ] **No raw nx commands used** unless explicitly required

#### **Workspace Analysis Verification**

- [ ] **Workspace architecture understood** via `nx_workspace`
- [ ] **All package dependencies mapped** and relationships identified
- [ ] **Broader context established** before focusing on specific packages
- [ ] **Target package context** within overall system established

#### **Documentation Compliance Verification**

- [ ] **Project documentation consulted** (SOP.md, Deep-Dive-Initial-Understanding-Audit.md)
- [ ] **Architectural patterns verified** against established guidelines
- [ ] **Testing strategy aligned** with package type and requirements
- [ ] **Implementation plan validated** against project standards

### **Critical Anti-Patterns for AI Agents**

#### **❌ FORBIDDEN: AKA Alias Violations**

- **Using raw nx commands** without checking `aka help` first
- **Ignoring package-specific aliases** and using generic commands
- **Not verifying command patterns** before execution
- **Falling back to npm/pnpm directly** when aka aliases are available

#### **❌ FORBIDDEN: Workspace Analysis Neglect**

- **Focusing on individual packages** without workspace-level analysis
- **Assuming all packages follow the same pattern** without systematic verification
- **Missing architectural variations** and deviations from standard patterns
- **Not understanding package dependencies** and relationships

#### **❌ FORBIDDEN: Documentation Disregard**

- **Not consulting project documentation** before implementation
- **Ignoring established patterns** in favor of custom solutions
- **Skipping systematic analysis** outlined in Deep-Dive-Initial-Understanding-Audit.md
- **Not following SOP.md guidelines** for architectural decisions

#### **❌ FORBIDDEN: Making Assumptions**

- Don't assume framework behavior without checking documentation
- Don't assume file contents without reading them
- Don't assume command behavior without testing
- Don't assume architectural patterns without consulting documentation

#### **❌ FORBIDDEN: Incomplete Solutions**

- Don't fix symptoms without addressing root causes
- Don't update one component without updating all consumers
- Don't implement partial solutions that create inconsistencies
- Don't skip verification steps

#### **❌ FORBIDDEN: Defending Mistakes**

- Don't defend misdiagnoses when user provides corrections
- Don't ignore explicit user feedback about performance or behavior
- Don't continue with failed approaches without pivoting
- Don't blame external factors for internal errors

### **Universal Workflow: Reconnaissance → Plan → Execute → Verify → Report**

#### **1. Reconnaissance**

- **Read relevant files** - understand current state and patterns
- **Check documentation** - consult project-specific documentation for established patterns
- **Identify dependencies** - map all affected components and consumers
- **Verify assumptions** - test against actual system behavior

#### **2. Plan**

- **System-wide impact** - include steps to update all consumers and dependencies
- **Architectural compliance** - ensure plan aligns with documented patterns
- **Risk assessment** - identify potential issues and mitigation strategies
- **Success criteria** - define clear outcomes and verification steps

#### **3. Execute**

- **Follow established patterns** - use documented architectural and testing approaches
- **Update all consumers** - shared adapters, imports, DI wiring, TypeScript mappings
- **Maintain consistency** - apply changes uniformly across affected components
- **Document as you go** - update project logs and relevant documentation

#### **4. Verify**

- **Reread changed files** - verify modifications were applied correctly
- **Run quality gates** - tests, builds, linters, type checks
- **End-to-end validation** - ensure primary workflows still function
- **Check for regressions** - verify no unintended side effects
- **Iterative test debugging** - run tests, identify failures, fix mocks/expectations, repeat until 100% success

#### **5. Report**

- **Clear status indicators** - ✅ success, ⚠️ self-corrected, 🚧 blockers
- **Evidence-based reporting** - include command outputs and file contents
- **Lessons learned** - document what worked and what failed
- **Next steps** - identify any remaining work or follow-up actions

### **Communication Standards**

#### **Question vs Directive Distinction**

**CRITICAL RULE**: Distinguish between user questions seeking understanding and directives requiring action.

##### **Questions Seeking Understanding**

When the user asks questions like:

- "Why are we creating adapters in ext and not in core?"
- "Shouldn't the tests be using \_setup instead of standalone mock files?"
- "Why did you think that was the right approach?"

**RESPONSE PROTOCOL**:

- **Explain the rationale** behind the current approach
- **Share the architectural reasoning** and design decisions
- **Educate on the patterns** and why they exist
- **DO NOT take action** unless explicitly requested
- **Treat as learning opportunities** for both parties

##### **Directives Requiring Action**

When the user uses directive language like:

- "We need to do X"
- "You need to implement Y"
- "We should change Z"

**RESPONSE PROTOCOL**:

- **Confirm understanding** of the request
- **Validate against best practices** and project documentation
- **Suggest improvements** if the directive conflicts with established patterns
- **Execute immediately** if the directive aligns with project standards

> **Note:** This document contains critical operational rules for AI agents working in the FocusedUX project. For detailed architectural patterns, build configurations, and implementation guidelines, refer to the source of truth documents in the `docs/` directory.
