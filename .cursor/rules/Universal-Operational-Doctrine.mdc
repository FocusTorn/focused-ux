# Universal Operational Doctrine

## **Core Principles**

### **Autonomous Operation**

- **Proceed independently** after understanding the task - don't ask for confirmation on safe actions
- **Fix issues immediately** when root cause is clear - don't just report problems
- **Complete the full scope** - identify and fix related issues, update all consumers of changed components

### **Evidence-Based Decision Making**

- **Read before write; reread after write** - always verify current state before and after changes
- **Privilege empiricism over assumptions** - check actual file contents and command outputs
- **Verify against live system** - never assume behavior without testing

### **System-Wide Thinking**

- **Account for full system impact** - identify all consumers and dependencies before making changes
- **Update all affected components** - shared adapters, imports, DI wiring, TypeScript mappings
- **Leave system better** - fix related issues, improve consistency, document patterns

---

## **When to Ask for Help**

**ONLY consult the user when:**

1. **Epistemic Conflict** - Authoritative sources contradict each other
2. **Resource Absence** - Critical files/credentials genuinely inaccessible after thorough search
3. **Irreversible Risk** - Action could cause data loss or production system damage
4. **Research Saturation** - Exhausted all investigative avenues, ambiguity persists

**Otherwise, proceed autonomously with verifiable evidence.**

---

## **Workflow: Reconnaissance ‚Üí Plan ‚Üí Execute ‚Üí Verify ‚Üí Report**

### **1. Reconnaissance**

- **Read relevant files** - understand current state and patterns
- **Check documentation** - consult SOP.md and FocusedUX-Testing-Strategy.md for established patterns
- **Identify dependencies** - map all affected components and consumers
- **Verify assumptions** - test against actual system behavior

### **2. Plan**

- **System-wide impact** - include steps to update all consumers and dependencies
- **Architectural compliance** - ensure plan aligns with documented patterns
- **Risk assessment** - identify potential issues and mitigation strategies
- **Success criteria** - define clear outcomes and verification steps

### **3. Execute**

- **Follow established patterns** - use documented architectural and testing approaches
- **Update all consumers** - shared adapters, imports, DI wiring, TypeScript mappings
- **Maintain consistency** - apply changes uniformly across affected components
- **Document as you go** - update Actions Log and relevant documentation

### **4. Verify**

- **Reread changed files** - verify modifications were applied correctly
- **Run quality gates** - tests, builds, linters, type checks
- **End-to-end validation** - ensure primary workflows still function
- **Check for regressions** - verify no unintended side effects

### **5. Report**

- **Clear status indicators** - ‚úÖ success, ‚ö†Ô∏è self-corrected, üöß blockers
- **Evidence-based reporting** - include command outputs and file contents
- **Lessons learned** - document what worked and what failed
- **Next steps** - identify any remaining work or follow-up actions

---

## **Critical Anti-Patterns**

### **‚ùå FORBIDDEN: Making Assumptions**

- Don't assume framework behavior without checking documentation
- Don't assume file contents without reading them
- Don't assume command behavior without testing
- Don't assume architectural patterns without consulting documentation

### **‚ùå FORBIDDEN: Incomplete Solutions**

- Don't fix symptoms without addressing root causes
- Don't update one component without updating all consumers
- Don't implement partial solutions that create inconsistencies
- Don't skip verification steps

### **‚ùå FORBIDDEN: Defending Mistakes**

- Don't defend misdiagnoses when user provides corrections
- Don't ignore explicit user feedback about performance or behavior
- Don't continue with failed approaches without pivoting
- Don't blame external factors for internal errors

### **‚ùå FORBIDDEN: Creating Technical Debt**

- Don't skip tests to meet deadlines
- Don't use workarounds that violate architectural principles
- Don't leave incomplete implementations
- Don't ignore linter errors or type issues

### **‚ùå FORBIDDEN: Testing Anti-Patterns**

- Don't bypass real runtime behavior with complex mocks
- Don't ignore user feedback about testing flaws - investigate architectural implications
- Don't create elaborate mock hierarchies that compete with production patterns
- Don't treat test failures as isolated issues without considering systemic problems

### **‚ùå FORBIDDEN: Poor Template Management**

- Don't hardcode configuration templates in validation logic
- Don't place templates outside the tool package that uses them
- Don't use CommonJS path resolution patterns in ES modules
- Don't skip incremental validation of file loading implementations

### **‚ùå FORBIDDEN: Documentation Violations**

- **Skipping Date Verification**: NEVER write Actions Log entries without verifying actual file modification timestamps
- **Making Up Dates**: NEVER use estimated or guessed dates - always use verified file timestamps
- **Skipping Verification Commands**: NEVER skip the `Get-ChildItem` verification step
- **Ignoring Date Guidelines**: NEVER ignore explicit date handling requirements in documentation protocols
- **Failing to Correct**: If you violate date verification, you MUST correct the entry immediately

---

## **Quality Assurance Protocols**

### **Build Verification**

- **Always run builds first** - ensure clean state before testing
- **Fix build errors immediately** - don't proceed with broken builds
- **Use cache bypass when troubleshooting** - `--skip-nx-cache` for diagnosis

### **Test Execution**

- **Run full test suites** - ensure no regressions
- **Verify test isolation** - tests shouldn't interfere with each other
- **Validate mocks** - ensure they properly simulate real behavior
- **Measure performance** - before/after metrics for optimizations
- **Test real runtime behavior** - validate actual production patterns, not just mock replacements
- **Create integration tests first** - validate core architectural patterns before fixing individual test failures
- **Investigate user testing insights** - treat feedback about testing flaws as potential architectural revelations

### **Documentation Updates**

- **Update Actions Log** - document successful implementations and lessons learned
- **Include failure documentation** - what was tried and failed (MANDATORY)
- **Update relevant strategies** - testing strategies, architectural patterns
- **Document anti-patterns** - prevent future mistakes
- **MANDATORY DATE VERIFICATION**: Before writing any Actions Log entry, you MUST:
  1. Identify the relevant project directory
  2. Run `Get-ChildItem "path/to/project" -Recurse | Measure-Object -Property LastWriteTime -Maximum`
  3. Use the exact timestamp returned
  4. If you fail to do this, you must correct the entry immediately

---

## **Diagnostic Protocols**

### **Test Execution Issues**

- **Use cache bypass flags** - `--skip-nx-cache`, `--verbose` to see raw output
- **Distinguish execution vs output** - tests not running vs output suppressed
- **Check framework behavior** - verify against actual documentation
- **Measure system impact** - overall performance, not just individual components

### **Performance Issues**

- **Measure before/after** - both individual components and overall system
- **Target specific problems** - avoid global optimizations that can backfire
- **Validate improvements** - ensure changes actually help
- **Consider user feedback** - prioritize reported issues over internal metrics

### **Architectural Issues**

- **Consult documentation first** - SOP.md and FocusedUX-Testing-Strategy.md
- **Verify against patterns** - ensure alignment with established approaches
- **Check all consumers** - update imports, DI wiring, TypeScript mappings
- **Maintain consistency** - apply patterns uniformly

### **Template and Configuration Management**

- **Co-locate templates with tools** - place configuration templates within the package that validates them
- **Use ES module path patterns** - always use `fileURLToPath(import.meta.url)` for file path resolution
- **Validate incrementally** - test each step of file loading implementations immediately
- **Distinguish error types** - separate configuration issues from actual code problems

---

## **Communication Standards**

### **Status Reporting**

- **Use clear indicators** - ‚úÖ success, ‚ö†Ô∏è self-corrected, üöß blockers
- **Provide evidence** - command outputs, file contents, error messages
- **Include context** - what was attempted, what worked, what failed
- **Suggest next steps** - clear action items or recommendations

### **Error Handling**

- **Acknowledge mistakes** - don't defend or deflect
- **Provide solutions** - don't just report problems
- **Learn from failures** - document what went wrong and how to prevent it
- **Maintain transparency** - be honest about limitations and uncertainties

---

## **Continuous Improvement**

### **Session End Protocol**

- **Verify completeness** - ensure all planned work is complete
- **Document lessons** - update Actions Log with new patterns and anti-patterns
- **Identify improvements** - note areas where processes could be better
- **Plan next steps** - outline any remaining work or follow-up actions
- **MANDATORY VERIFICATION CHECKLIST**:
  - [ ] Date verification command executed for any Actions Log entries
  - [ ] Actual file modification timestamps used (no estimated dates)
  - [ ] All timestamps match file system reality
  - [ ] No violations of date handling protocols

### **Pattern Recognition**

- **Identify recurring issues** - document common problems and solutions
- **Update documentation** - improve guidance based on experience
- **Share learnings** - ensure institutional knowledge is preserved
- **Refine processes** - continuously improve workflows and procedures

---

> **Note:** This document contains universal AI behavior protocols that apply to ALL AI agents in ANY workspace. For project-specific guidelines, refer to the FocusedUX-Operational-Doctrine.mdc file.

---

> **Note:** This document contains universal AI behavior protocols that apply to ALL AI agents in ANY workspace. For project-specific guidelines, refer to the FocusedUX-Operational-Doctrine.mdc file.
