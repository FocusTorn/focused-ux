{
    "name": "@fux/project-alias-expander",
    "$schema": "../../node_modules/nx/schemas/project-schema.json",
    "sourceRoot": "utilities/project-alias-expander/src",
    "projectType": "library",
    "tags": ["tool"],
    "targets": {

        //= Production ========================================================== 
        
        /**
         * Production build target - optimized for performance and distribution.
         * 
         * **Purpose:** Creates a production-ready bundle with maximum optimization
         * **Use Case:** When you need the fastest, smallest executable for distribution
         * **Output:** Single bundled `cli.js` file in `dist/` directory
         * 
         * **Optimizations Applied:**
         * - ✅ Bundling: All dependencies inlined into single file
         * - ✅ Minification: Code compressed for smallest size
         * - ✅ Tree shaking: Dead code eliminated
         * - ✅ No sourcemaps: Faster build, smaller output
         * - ✅ No declarations: No TypeScript .d.ts files
         * - ✅ ESM format: Modern module system
         * 
         * **Performance:** ~2-3x faster execution, ~50-70% smaller file size
         * **Trade-offs:** Harder to debug, longer build time
         * 
         * @example
         * ```bash
         * nx run project-alias-expander:build
         * # Creates: dist/cli.js (optimized bundle)
         * ```
         */
        "build": { //>
            "executor": "@nx/esbuild:esbuild",
            "outputs": ["{options.outputPath}"],
            "inputs": ["production", "^production", "{projectRoot}/src/**/*"],
            "options": {
                "main": "{projectRoot}/src/cli.ts",
                "outputPath": "{projectRoot}/dist",
                "outputFileName": "cli.js",
                "tsConfig": "{projectRoot}/tsconfig.json",
                "declarationRootDir": "{projectRoot}/src",
                "format": ["esm"],
                "external": ["vscode"],
                "bundle": true,
                "sourcemap": false,
                "declaration": false,
                "minify": true,
                "treeShaking": true,
                "metafile": true
            }
        }, //<
        
        /**
         * Creates npm-compatible tarball and optionally installs globally.
         * 
         * **Purpose:** Packages the built application for global installation
         * **Use Case:** When you want to install the CLI tool globally with `pnpm -g`
         * **Output:** `.tgz` tarball file in project root
         * 
         * **Process:**
         * 1. Collects files from `package.json` "files" field
         * 2. Includes `dist/`, `README.md`, `package.json`
         * 3. Creates `.tgz` tarball using fast archiver (not npm pack)
         * 4. Installs globally with `pnpm add -g` (if `installGlobal: true`)
         * 
         * **Performance:** ~5-10x faster than `npm pack` (no subprocess overhead)
         * **Dependencies:** Requires `build:bundle` to complete first
         * 
         * @example
         * ```bash
         * nx run project-alias-expander:build:install
         * # Creates: fux-project-alias-expander-1.0.0.tgz
         * # Installs: globally accessible CLI tool
         * ```
         */
        "build:install": { //>
            "executor": "@fux/npack:pack",
            "dependsOn": ["build"],
            "outputs": ["{projectRoot}/*.tgz"],
            "inputs": [
                "production",
                "^production",
                "{projectRoot}/package.json",
                "{projectRoot}/README.md",
                "{projectRoot}/dist/**/*"
            ],
            "options": {
                "keepTemp": false,
                "freshTemp": true,
                "installGlobal": true
            }
        }, //<
        
        /**
         * Complete installation workflow - builds and installs in one command.
         * 
         * **Purpose:** One-command solution to build and globally install the CLI
         * **Use Case:** When you want to deploy/install the tool end-to-end
         * **Workflow:** Runs `build` → `build:install` in sequence
         * 
         * **Benefits:**
         * - ✅ Single command for complete deployment
         * - ✅ Ensures proper build order
         * - ✅ Handles all dependencies automatically
         * 
         * **Note:** This is a convenience target that orchestrates other targets
         * 
         * @example
         * ```bash
         * nx run project-alias-expander:install
         * # Equivalent to: build && build:install
         * # Result: Globally installed CLI tool
         * ```
         */
        "install": { //>
            "executor": "nx:run-commands",
            "dependsOn": ["build", "build:install"],
            "outputs": ["{projectRoot}/dist"],
            "inputs": ["production", "^production"],
            "options": {
                "commands": [],
                "parallel": false
            }
        }, //<
        
        //= Development ========================================================= 
        
        /**
         * Development build target - optimized for debugging and development.
         * 
         * **Purpose:** Creates a development build with full debugging capabilities
         * **Use Case:** When developing, testing, or debugging the CLI tool
         * **Output:** Unbundled files in `dist/` with sourcemaps and declarations
         * 
         * **Development Features:**
         * - ✅ No bundling: Individual files for easier debugging
         * - ✅ Sourcemaps: Full stack traces with original source locations
         * - ✅ TypeScript declarations: Full type information (.d.ts files)
         * - ✅ No minification: Readable code for debugging
         * - ✅ No tree shaking: All code preserved for development
         * - ✅ ESM format: Modern module system maintained
         * 
         * **Performance:** Slower execution, larger file size, but much easier to debug
         * **Trade-offs:** Larger output, slower runtime, but better development experience
         * 
         * @example
         * ```bash
         * nx run project-alias-expander:build:dev
         * # Creates: dist/cli.js + cli.d.ts + sourcemaps
         * # Result: Development-ready build with full debugging
         * ```
         */
        "build:dev": { //>
            "executor": "@nx/esbuild:esbuild",
            "outputs": ["{options.outputPath}"],
            "inputs": ["production", "^production", "{projectRoot}/src/**/*"],
            "options": {
                "main": "{projectRoot}/src/cli.ts",
                "outputPath": "{projectRoot}/dist",
                "outputFileName": "cli.js",
                "tsConfig": "{projectRoot}/tsconfig.json",
                "declarationRootDir": "{projectRoot}/src",
                "external": ["vscode"],
                "format": ["esm"],
                "bundle": false,
                "sourcemap": true,
                "declaration": true,
                "minify": false,
                "treeShaking": false,
                "metafile": false
            }
        }, //<
            
        /**
         * Direct execution of CLI without building or installing.
         * 
         * **Purpose:** Test CLI functionality directly from source code
         * **Use Case:** Rapid development, testing commands, debugging without build step
         * **Execution:** Runs TypeScript source directly using `tsx`
         * 
         * **Benefits:**
         * - ✅ Instant execution - no build step required
         * - ✅ Live TypeScript execution with `tsx`
         * - ✅ Perfect for testing and development
         * - ✅ Passes through all command line arguments
         * 
         * **Limitations:**
         * - ❌ Requires `tsx` to be available globally
         * - ❌ Slower than built executable
         * - ❌ Not suitable for production use
         * 
         * @example
         * ```bash
         * nx run project-alias-expander:use --help
         * nx run project-alias-expander:use --version
         * nx run project-alias-expander:use some-command
         * # Executes: tsx src/cli.ts some-command
         * ```
         */
        "use": { //>
            "executor": "nx:run-commands",
            "options": {
                "command": "tsx utilities/project-alias-expander/src/cli.ts {args}"
            }
        }, //<
        
        //= Quality ============================================================= 
        "check-types": { "extends": "check-types" },
        "check-types:deps": { "extends": "check-types:deps" },
        
        "lint": { "extends": "lint" },
        "lint:deps": { "extends": "lint:deps" },
        "lint:file": { //>
            "executor": "@nx/eslint:lint",
            "cache": true,
            "dependsOn": ["build"],
            "options": {
                "lintFilePatterns": ["{projectRoot}/src/*.ts"]
            }
        }, //<
        
        "audit": { "extends": "audit" },
        "audit:code": { "extends": "audit:code" },
        "audit:test": { "extends": "audit:test" },
        "audit:all": { "extends": "audit:all" },
        
        //= Cleaning ============================================================ 
        "clean": { "extends": "clean" },
        "clean:dist": { "extends": "clean:dist" },
        "clean:cache": { "extends": "clean:cache" },
        
        //= Testing ============================================================= 
        "test": { //>
            "executor": "@nx/vite:test",
            "outputs": ["{options.reportsDirectory}"],
            "dependsOn": ["build:dev"],
            "options": {
                "configFile": "{projectRoot}/vitest.config.ts",
                "reportsDirectory": "__tests__/_reports/functional",
                "passWithNoTests": true
            }
        }, //<
        "test:coverage-tests": { //>
            "executor": "@nx/vite:test",
            "outputs": ["{options.reportsDirectory}"],
            "options": {
                "configFile": "{projectRoot}/vitest.coverage.config.ts",
                "reportsDirectory": "__tests__/_reports/coverage",
                "passWithNoTests": true
            }
        } //<

    }
}
