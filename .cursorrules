{
    "description": "AI-Optimized Operational Doctrine for Universal and FocusedUX-specific operations",
    "globs": [
        "**/*"
    ],
    "alwaysApply": true,
    "sections": {
        "Universal": {
            "documentPurpose": {
                "primaryConsumer": "AI Agent requiring systematic behavior protocols",
                "objective": "Universal AI behavior protocols for ALL workspaces and contexts",
                "scope": "Communication patterns, response validation, quality assurance, and error handling"
            },
            "criticalPreResponseValidationFramework": {
                "mandatoryExecutionChecklist": {
                    "step1": {
                        "name": "Input Classification",
                        "checks": [
                            "Question Detection: User seeking understanding, explanation, or rationale?",
                            "Directive Detection: User giving commands, instructions, or requiring action?",
                            "Uncertainty Detection: User expressing doubt with 'think', 'might', 'suspect', 'seems like'?"
                        ]
                    },
                    "step2": {
                        "name": "Protocol Compliance",
                        "checks": [
                            "Documentation Check: If directive, have I verified relevant documentation exists?",
                            "Tool Usage: If directive involves commands, will I use project-specific tools?",
                            "Pattern Adherence: If directive involves code changes, will I follow established patterns?"
                        ]
                    },
                    "step3": {
                        "name": "Response Validation",
                        "checks": [
                            "Question Protocol: If question, I will explain rationale only (NO ACTION)",
                            "Directive Protocol: If directive, I will validate, suggest improvements, then execute",
                            "Uncertainty Protocol: If uncertainty detected, I will investigate immediately"
                        ]
                    },
                    "step4": {
                        "name": "Violation Detection",
                        "checks": [
                            "Self-Monitoring: If I detect any protocol violation, I will acknowledge immediately",
                            "Correction Protocol: I will correct violations and explain the error"
                        ]
                    },
                    "violationPenalty": "Any failure to complete this checklist constitutes a critical failure requiring immediate acknowledgment and correction"
                },
                "statusIndicatorProtocol": {
                    "normalResponses": "Display at response top: ✅ Protocols validated (all checks pass)",
                    "violationResponses": "Display complete checklist with violation details and correction plan"
                }
            },
            "communicationPatternMatrix": {
                "inputTypeDetectionAlgorithm": {
                    "questionIndicators": [
                        "Why are we...",
                        "Shouldn't the tests...",
                        "Why did you think...",
                        "What caused you to...",
                        "What do we need to change...",
                        "How could you say...",
                        "What are your suggestions...",
                        "What's your thinking on..."
                    ],
                    "directiveIndicators": [
                        "We need to do X",
                        "You need to implement Y",
                        "We should change Z",
                        "Move this to that location",
                        "Create a new...",
                        "Update the..."
                    ],
                    "uncertaintyIndicators": [
                        "I think...",
                        "might be...",
                        "not sure if...",
                        "suspect...",
                        "seems like..."
                    ]
                },
                "responseExecutionProtocols": {
                    "questionResponseTemplate": {
                        "structure": [
                            "Let me explain the rationale behind...",
                            "The architectural reasoning is...",
                            "This pattern exists because...",
                            "CRITICAL: DO NOT take action, make changes, or implement solutions"
                        ]
                    },
                    "directiveResponseTemplate": {
                        "structure": [
                            "I understand you want me to...",
                            "I'll implement this following...",
                            "Executing now...",
                            "CRITICAL: Take immediate action, make changes, implement solutions"
                        ]
                    },
                    "uncertaintyResponseTemplate": {
                        "structure": [
                            "IMMEDIATE INVESTIGATION: Take action to verify user's suspicion",
                            "CONCRETE EVIDENCE: Provide file contents, command outputs, or configuration details",
                            "CONFIRMATION/REFUTATION: Either agree with assessment or provide actual state",
                            "CRITICAL: DO NOT agree prematurely - wait for investigation results"
                        ]
                    }
                }
            },
            "documentationFirstExecutionFramework": {
                "mandatoryDocumentationCheck": {
                    "documentationMapping": {
                        "testingRequests": "docs/FocusedUX-Testing-Strategy.md",
                        "architectureQuestions": "docs/Architecture.md",
                        "buildConfiguration": "docs/SOP.md",
                        "previousSolutions": "docs/Actions-Log.md",
                        "packagePatterns": "docs/Deep-Dive-Initial-Understanding-Audit.md"
                    },
                    "executionProtocol": [
                        "Check documentation first - Look for existing solutions",
                        "Reference existing patterns - 'Following the established pattern in [document]...'",
                        "Execute documented solutions - Implement directly without additional analysis",
                        "Create new solutions only - If no documentation exists for specific request"
                    ]
                },
                "documentationViolationPrevention": {
                    "forbiddenActions": [
                        "Creating new solutions when comprehensive documentation exists",
                        "Performing unnecessary analysis when documented patterns are available",
                        "Asking questions already answered in documentation",
                        "Overcomplicating responses instead of following established guidance"
                    ],
                    "requiredActions": [
                        "Always check docs first before creating new solutions",
                        "Reference existing patterns directly in responses",
                        "Implement documented solutions without additional analysis",
                        "Acknowledge documentation as the source of the approach"
                    ]
                }
            },
            "qualityAssuranceExecutionFramework": {
                "buildVerificationProtocol": {
                    "mandatoryBuildSequence": [
                        "Always run builds first - ensure clean state before testing",
                        "Fix build errors immediately - don't proceed with broken builds",
                        "Use appropriate cache bypass - follow project-specific guidance"
                    ]
                },
                "testExecutionProtocol": {
                    "mandatoryTestSequence": [
                        "Run full test suites - ensure no regressions",
                        "Verify test isolation - tests shouldn't interfere with each other",
                        "Validate mocks - ensure they properly simulate real behavior",
                        "Measure performance - before/after metrics for optimizations",
                        "Test real runtime behavior - validate actual production patterns"
                    ]
                },
                "documentationUpdateProtocol": {
                    "mandatoryDocumentationSequence": [
                        "Update project logs - document successful implementations",
                        "Include failure documentation - what was tried and failed (MANDATORY)",
                        "Update relevant strategies - testing strategies, architectural patterns",
                        "Document anti-patterns - prevent future mistakes"
                    ],
                    "criticalDateVerification": [
                        "Identify relevant project directory",
                        "Run appropriate file timestamp verification command",
                        "Use exact timestamp returned",
                        "Correct entry immediately if verification fails"
                    ]
                }
            },
            "errorHandlingExecutionFramework": {
                "violationAcknowledgmentProtocol": [
                    "Acknowledge immediately - don't defend or deflect",
                    "Explain the violation - what rule was broken",
                    "Provide correction plan - how to fix the violation",
                    "Execute correction - implement the fix immediately"
                ],
                "statusReportingProtocol": {
                    "useClearIndicators": {
                        "success": "✅ Success - operation completed successfully",
                        "selfCorrected": "⚠️ Self-corrected - violation detected and corrected",
                        "blockers": "🚧 Blockers - issues preventing completion"
                    },
                    "provideEvidence": [
                        "Command outputs",
                        "File contents",
                        "Error messages",
                        "Context of what was attempted"
                    ]
                }
            },
            "continuousImprovementFramework": {
                "sessionEndProtocol": {
                    "mandatoryVerificationChecklist": [
                        "Date verification command executed for any log entries",
                        "Actual file modification timestamps used (no estimated dates)",
                        "All timestamps match file system reality",
                        "No violations of date handling protocols"
                    ]
                },
                "patternRecognitionProtocol": [
                    "Recurring issues and their solutions",
                    "Common problems and prevention strategies",
                    "Areas where processes could be improved",
                    "Lessons learned for future sessions"
                ]
            },
            "executionPriorityMatrix": {
                "criticalPriority": [
                    "Pre-response validation checklist",
                    "Violation detection and correction",
                    "Build error resolution",
                    "Documentation verification"
                ],
                "highPriority": [
                    "Test execution and validation",
                    "Pattern compliance verification",
                    "Tool usage verification",
                    "Error acknowledgment"
                ],
                "mediumPriority": [
                    "Documentation updates",
                    "Pattern recognition",
                    "Performance measurement",
                    "Status reporting"
                ],
                "lowPriority": [
                    "Process improvements",
                    "Pattern documentation",
                    "Lesson sharing",
                    "Future planning"
                ]
            }
        },
        "Project-FocusedUX": {
            "documentPurpose": {
                "primaryConsumer": "AI Agent operating in FocusedUX workspace",
                "objective": "Project-specific operational guidelines for FocusedUX workspace",
                "scope": "Architecture patterns, testing strategies, command execution, and anti-patterns"
            },
            "criticalPreResponseValidationFramework": {
                "mandatoryExecutionChecklist": {
                    "step1": {
                        "name": "PAE Alias Compliance",
                        "checks": [
                            "Alias Discovery: Will I attempt 'pae help' first to discover available aliases?",
                            "Alias Usage: Will I use appropriate alias for the operation (e.g., 'pae dc b' for dynamicons build)?",
                            "Fallback Protocol: Will I only use direct nx commands if no alias exists or alias fails?",
                            "Documentation: Will I document any missing aliases that should be added to PAE system?"
                        ]
                    },
                    "step2": {
                        "name": "Build-Before-Test Compliance",
                        "checks": [
                            "Build First: If directive involves testing, will I run '{alias} b' first?",
                            "Error Resolution: Will I fix build errors immediately before proceeding?",
                            "Cache Bypass: Will I use '--skip-nx-cache' for troubleshooting when needed?"
                        ]
                    },
                    "step3": {
                        "name": "Documentation First Compliance",
                        "checks": [
                            "Architecture Check: Have I checked './docs/Architecture.md' for package structure and patterns?",
                            "Testing Check: Have I checked './docs/FocusedUX-Testing-Strategy.md' for testing patterns?",
                            "Previous Solutions: Have I checked './docs/Actions-Log.md' for existing implementations?"
                        ]
                    },
                    "step4": {
                        "name": "Package Analysis Compliance",
                        "checks": [
                            "Project Details: Will I use 'nx_project_details' to understand package dependencies?",
                            "Architectural Deviations: Will I check for deviations from standard patterns?",
                            "Package Type Verification: Will I verify package type (core vs ext vs shared vs tool) and role?"
                        ]
                    },
                    "step5": {
                        "name": "Self-Correction",
                        "checks": [
                            "Violation Detection: If I detect any protocol violation, will I acknowledge immediately?"
                        ]
                    },
                    "violationPenalty": "Any failure to complete this checklist constitutes a critical failure requiring immediate acknowledgment and correction"
                }
            },
            "architectureExecutionFramework": {
                "referenceDocumentationMapping": {
                    "architecture": "./docs/Architecture.md - Package structure, build configurations, implementation patterns",
                    "testing": "./docs/FocusedUX-Testing-Strategy.md - Testing patterns and implementation guides",
                    "previousSolutions": "./docs/Actions-Log.md - Existing implementations and lessons learned"
                },
                "packageTypeExecutionMatrix": {
                    "corePackages": {
                        "path": "packages/{feature}/core/",
                        "role": "Pure business logic, self-contained",
                        "architecture": "Type imports only, no VSCode value imports",
                        "dependencies": "Minimal external, no shared package dependencies",
                        "build": "bundle: false, format: ['esm']"
                    },
                    "extensionPackages": {
                        "path": "packages/{feature}/ext/",
                        "role": "VSCode integration wrapper",
                        "architecture": "Local adapters, CommonJS bundle",
                        "dependencies": "Primary dependency on core package",
                        "build": "bundle: true, format: ['cjs']"
                    },
                    "sharedPackages": {
                        "path": "libs/shared/",
                        "role": "Utilities for other packages",
                        "architecture": "Pure functions, clear exports",
                        "dependencies": "No VSCode dependencies",
                        "build": "bundle: false, format: ['esm']"
                    },
                    "toolPackages": {
                        "path": "libs/tools/{tool-name}/",
                        "role": "Standalone utilities",
                        "architecture": "Direct execution, minimal dependencies",
                        "dependencies": "Minimal external dependencies",
                        "build": "bundle: false, format: ['esm']"
                    }
                }
            },
            "testingExecutionFramework": {
                "testConfigurationProtocol": {
                    "executorSpecification": {
                        "use": "@nx/vite:test (direct executor, not extends)",
                        "testOrganization": "__tests__/functional/ structure",
                        "setupFiles": "./__tests__/_setup.ts for global test setup"
                    }
                },
                "testExecutionProtocol": {
                    "mandatoryTestSequence": [
                        "Run '{alias} b' first - ensure clean builds before testing",
                        "Execute full test suites - ensure no regressions",
                        "Verify test isolation - tests shouldn't interfere with each other",
                        "Validate mocks - verify mocks properly simulate real behavior"
                    ]
                },
                "testLaneExecutionMatrix": {
                    "fastFeedback": {
                        "command": "t",
                        "useCase": "Quick validation, fast feedback",
                        "coverage": "None"
                    },
                    "comprehensiveValidation": {
                        "command": "tc or tcw",
                        "useCase": "Full validation, coverage reporting",
                        "coverage": "Full coverage analysis"
                    },
                    "cacheTroubleshooting": {
                        "command": "-s (skip cache)",
                        "useCase": "Diagnosing cache issues only",
                        "avoid": "Normal operation"
                    }
                }
            },
            "commandExecutionFramework": {
                "paeAliasMandate": {
                    "criticalRules": [
                        "ALWAYS use PAE aliases for all project operations",
                        "NEVER fall back to npm/nx directly unless explicitly requested",
                        "Primary discovery: 'pae help'",
                        "Deviation prevention: Any deviation constitutes a critical failure"
                    ]
                },
                "fallbackExecutionProtocol": {
                    "step1": "Alias Discovery - Execute 'pae help' first to discover available aliases",
                    "step2": "Alias Usage - Execute appropriate alias (e.g., 'pae dc b' for dynamicons build)",
                    "step3": "Fallback Conditions - Use direct nx commands ONLY if no appropriate alias exists or alias fails",
                    "step4": "Documentation - Document any missing aliases that should be added to PAE system"
                },
                "buildToolExecutionPreferences": {
                    "cacheBypass": "Use '--skip-nx-cache' for troubleshooting Nx build issues",
                    "packageManager": "Prefer 'pnpm' over 'npm' for all package management tasks",
                    "projectAliases": "Use project-specific aliases - 'shared', 'mockly', 'pbc', 'pbe', etc."
                }
            },
            "antiPatternPreventionFramework": {
                "architecturalViolationPrevention": {
                    "businessLogicInExtensions": {
                        "rule": "Business logic belongs in core packages only",
                        "violation": "Any business logic in extension packages",
                        "prevention": "Verify all business logic is in core packages"
                    },
                    "directVSCodeValueImports": {
                        "rule": "Only type imports allowed outside shared adapters",
                        "violation": "import { Uri } from 'vscode' (value import)",
                        "allowed": "import type { Uri } from 'vscode' (type import)"
                    },
                    "incompleteConsumerUpdates": {
                        "rule": "Update all consumers when modifying shared components",
                        "violation": "Partial updates leaving some consumers broken",
                        "prevention": "Systematic update of all dependent packages"
                    },
                    "diContainersInCorePackages": {
                        "rule": "Core packages should be self-contained",
                        "violation": "Using DI containers in core packages",
                        "prevention": "Direct service instantiation in core packages"
                    },
                    "sharedDependenciesInCorePackages": {
                        "rule": "Core packages should have minimal external dependencies",
                        "violation": "Adding shared package dependencies to core packages",
                        "prevention": "Verify core packages are self-contained"
                    },
                    "vscodeExtensionConfigurationRemoval": {
                        "rule": "Never remove VSCode extension metadata during refactoring",
                        "violation": "Removing 'contributes', 'activationEvents', 'engines'",
                        "prevention": "Preserve all VSCode extension configuration"
                    }
                },
                "testingViolationPrevention": {
                    "vscodeMockingInSharedTests": {
                        "rule": "Don't use 'vi.mock('vscode')' in shared package tests",
                        "violation": "Mocking VSCode in shared package tests",
                        "prevention": "Use appropriate mocking strategies for shared packages"
                    },
                    "testSkippingForDeadlines": {
                        "rule": "Never skip tests to meet deadlines",
                        "violation": "Skipping tests for expediency",
                        "prevention": "Ensure all tests pass before proceeding"
                    },
                    "largeTestFiles": {
                        "rule": "Never allow test files to exceed 500 lines",
                        "violation": "Large, unfocused test files",
                        "prevention": "Split into focused units proactively"
                    },
                    "timeoutInducingTests": {
                        "rule": "Mock complex internal methods to prevent timeouts",
                        "violation": "Tests calling complex internal methods without mocking",
                        "prevention": "Isolate unit tests from complex dependencies"
                    },
                    "testSimplificationAntiPattern": {
                        "rule": "Tests must verify actual implementation behavior",
                        "violation": "Over-simplified tests that don't verify real behavior",
                        "prevention": "Ensure tests validate actual implementation"
                    }
                },
                "documentationViolationPrevention": {
                    "skippingDateVerification": {
                        "rule": "NEVER write Actions Log entries without verifying actual file timestamps",
                        "violation": "Using estimated or guessed dates",
                        "prevention": "Always use verified file modification timestamps"
                    },
                    "makingUpDates": {
                        "rule": "NEVER use estimated or guessed dates",
                        "violation": "Using approximate dates in documentation",
                        "prevention": "Always verify actual file timestamps"
                    },
                    "prematureCompletionClaims": {
                        "rule": "NEVER document completion without verification",
                        "violation": "Claiming completion without verifying all components",
                        "prevention": "Verify ALL claimed components before documenting"
                    },
                    "historicalReferenceModification": {
                        "rule": "NEVER modify historical references in Actions Log entries",
                        "violation": "Updating old log entries to reflect current tool names or patterns",
                        "prevention": "Preserve historical accuracy - references were correct at the time of entry",
                        "rationale": "Historical entries document the actual tools and patterns used when the work was performed"
                    }
                },
                "buildViolationPrevention": {
                    "buildDependenciesInWrongSection": {
                        "rule": "Build-only dependencies belong in 'devDependencies'",
                        "violation": "Build dependencies in 'dependencies'",
                        "prevention": "Verify dependency categorization"
                    },
                    "directNodejsModuleImports": {
                        "rule": "Don't import Node.js modules directly in extension code",
                        "violation": "Direct Node.js imports in extension packages",
                        "prevention": "Use appropriate abstraction layers"
                    },
                    "missingExternalization": {
                        "rule": "All third-party dependencies must be externalized",
                        "violation": "Missing externalization of dependencies",
                        "prevention": "Verify all dependencies are properly externalized"
                    },
                    "cachingPackagingTargets": {
                        "rule": "NEVER cache 'package:dev' targets",
                        "violation": "Caching targets that create unique timestamped versions",
                        "prevention": "Disable caching for packaging targets"
                    }
                },
                "validationViolationPrevention": {
                    "strictErrorThrowing": {
                        "rule": "Use warnings for non-critical validation issues",
                        "violation": "Throwing errors for non-blocking issues",
                        "prevention": "Prioritize user experience over strict validation"
                    },
                    "userExperienceNeglect": {
                        "rule": "Never prioritize strict validation over user experience",
                        "violation": "Blocking user workflow for non-critical issues",
                        "prevention": "Use warnings for non-blocking validation issues"
                    }
                },
                "refactoringViolationPrevention": {
                    "incrementalRenaming": {
                        "rule": "Execute complete renaming in logical order",
                        "violation": "Partial renaming leaving inconsistent state",
                        "prevention": "Plan and execute complete renaming sequences"
                    },
                    "patternDeviation": {
                        "rule": "Don't create custom solutions when patterns exist",
                        "violation": "Ignoring established patterns for custom solutions",
                        "prevention": "Follow established patterns unless absolutely necessary"
                    },
                    "interfaceFirstViolations": {
                        "rule": "Define complete interface contracts before implementation",
                        "violation": "Implementing services before defining interfaces",
                        "prevention": "Complete interface definition before implementation"
                    },
                    "buildBeforeInterface": {
                        "rule": "Complete interface definitions before building",
                        "violation": "Attempting builds before interface completion",
                        "prevention": "Complete architectural refactoring before builds"
                    }
                }
            },
            "executionPriorityMatrix": {
                "criticalPriority": [
                    "PAE alias compliance verification",
                    "Build-before-test execution",
                    "Documentation first verification",
                    "Package analysis execution",
                    "Anti-pattern violation detection"
                ],
                "highPriority": [
                    "Test execution and validation",
                    "Build error resolution",
                    "Pattern compliance verification",
                    "Tool usage verification"
                ],
                "mediumPriority": [
                    "Documentation updates",
                    "Pattern recognition",
                    "Performance measurement",
                    "Status reporting"
                ],
                "lowPriority": [
                    "Process improvements",
                    "Pattern documentation",
                    "Lesson sharing",
                    "Future planning"
                ]
            },
            "quickReference": {
                "build": "Always run {alias} b first",
                "testing": "Use {alias} t for fast, {alias} tc for coverage",
                "aliases": "pae help to discover, never fall back to direct nx",
                "documentation": "Check docs/ first before creating solutions",
                "packageTypes": "Core: pure logic, Ext: VSCode wrapper, Shared: utilities",
                "antiPatterns": "No business logic in extensions, no VSCode value imports"
            },
            "commonViolations": {
                "architectural": [
                    "Business logic in extensions",
                    "VSCode value imports outside adapters",
                    "Shared dependencies in core packages",
                    "DI containers in core packages"
                ],
                "testing": [
                    "Skipping tests for deadlines",
                    "Large test files (>500 lines)",
                    "VSCode mocking in shared tests",
                    "Tests calling complex internal methods without mocking"
                ],
                "build": [
                    "Missing externalization of dependencies",
                    "Build dependencies in wrong section",
                    "Caching packaging targets",
                    "Direct Node.js module imports in extensions"
                ],
                "documentation": [
                    "Using estimated dates without verification",
                    "Claiming completion without verification",
                    "Modifying historical references",
                    "Creating solutions when documentation exists"
                ]
            },
            "quickCommandReference": {
                "build": "{alias} b",
                "test": "{alias} t",
                "testCoverage": "{alias} tc",
                "testCoverageWatch": "{alias} tcw",
                "skipCache": "{alias} b -s",
                "help": "pae help",
                "packageDev": "{alias} p:dev",
                "packageProd": "{alias} p:prod"
            }
        }
    }
}